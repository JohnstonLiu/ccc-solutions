import java.io.*;
import java.util.*;

public class S3AbsolutelyAcidic2012 {
    private static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

    public static void main(String[] args) {
        FastReader sc = new FastReader();
        int N = sc.nextInt();
        int[] readings = new int[1001];
        for (int i = 0; i < N; i++){
            readings[sc.nextInt()]++;
        }
        int[] temp = readings.clone();
        Arrays.sort(temp);
        int max = temp[1000];
        int sMax = -1;
        for (int i = 1000; i >= 0; i--){
            if (temp[i] != 0 && temp[i] != max){
                sMax = temp[i];
                break;
            }
        }

        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        for (int i = 1000; i >= 0; i--) {
            if (readings[i] == max) {
                a.add(i);
            }
            if (readings[i] == sMax) {
                b.add(i);
            }
        }

        Collections.sort(a);
        Collections.sort(b);
        if (a.size() > 1){
            System.out.println(Math.abs(a.get(0)-a.get(a.size()-1)));
            return;
        }
        System.out.println(Math.max(Math.abs(b.get(0) - a.get(a.size()-1)), Math.abs(b.get(b.size()-1) - a.get(0))));

    }
}